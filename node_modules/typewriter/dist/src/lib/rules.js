"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const omitDeep = require("omit-deep-lodash");
const sortKeys = require("sort-keys");
const lodash_1 = require("lodash");
const quicktype_core_1 = require("quicktype-core");
/**
 * Remove all instances of `required: []` from a JSON Schema.
 * These are considered invalid in JSON Schema Draft-04.
 *
 * Modifies object in-place.
 *
 * Inspired by: https://softwareengineering.stackexchange.com/a/323670
 */
function removeEmptyRequireds(obj) {
    for (const property in obj) {
        if (obj.hasOwnProperty(property)) {
            const value = obj[property];
            if (value instanceof Array) {
                if (property === 'required' && value instanceof Array && value.length === 0) {
                    delete obj[property];
                }
                else {
                    value.forEach(item => removeEmptyRequireds(item));
                }
            }
            else if (value instanceof Object) {
                removeEmptyRequireds(value);
            }
        }
    }
}
/**
 * Performs pre-processing on a set of JSON Schema rules to prepare
 * them for AJV compilation.
 *
 * @param rules JSON Schema rules
 */
exports.preprocessRules = lodash_1.flow(
// In JSON Schema Draft-04, required fields must have at least one element.
// Therefore, we strip `required: []` from your rules so this error isn't surfaced.
(rules) => {
    removeEmptyRequireds(rules);
    return rules;
}, 
// Enforce a deterministic ordering to reduce verson control deltas.
(rules) => sortKeys(rules, { deep: true }), (rules) => omitDeep(rules, 'id'));
/**
 * Generates a QuickType InputData object that contains all JSON Schemas
 * from a set of Events.
 */
exports.processEventsForQuickType = (events) => {
    const inputData = new quicktype_core_1.InputData();
    events.forEach(({ name, rules }) => {
        const schema = Object.assign({ $schema: rules.$schema || 'http://json-schema.org/draft-07/schema#', title: rules.title, description: rules.description }, lodash_1.get(rules, 'properties.properties', {}));
        inputData.addSource('schema', { name, uris: [name], schema: JSON.stringify(schema) }, () => new quicktype_core_1.JSONSchemaInput(undefined));
    });
    return inputData;
};
//# sourceMappingURL=rules.js.map