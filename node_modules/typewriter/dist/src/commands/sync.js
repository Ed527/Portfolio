"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const util = require("util");
const path_1 = require("path");
const api_1 = require("../lib/api");
const rules_1 = require("../lib/rules");
const prettier = require("prettier");
const writeFile = util.promisify(fs.writeFile);
const stat = util.promisify(fs.stat);
exports.command = 'sync';
exports.desc = 'Pull down a JSON Schema from a Protocols Tracking Plan';
exports.builder = {
    trackingPlanId: {
        type: 'string',
        required: true,
        description: 'The resource id of your Tracking Plan'
    },
    workspaceSlug: {
        type: 'string',
        required: true,
        description: 'A slug that corresponds to the workspace that contains your Tracking Plan'
    },
    token: {
        type: 'string',
        required: true,
        description: 'Your Segment Platform API Personal App Token'
    },
    outputPath: {
        type: 'string',
        required: true,
        description: 'The output path for the JSON Schema'
    }
};
function validateParams(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { trackingPlanId, workspaceSlug, token, outputPath } = params;
        if (!/^rs_.*$/.test(trackingPlanId)) {
            throw new Error(`Invalid --trackingPlanId ('${trackingPlanId}')`);
        }
        if (workspaceSlug.length === 0) {
            throw new Error(`Invalid --workspaceSlug ('${workspaceSlug}')`);
        }
        // Two 43 character URL-safe (RFC 4648) base64 strings, separated by a period.
        if (!/^[a-zA-Z0-9-_=]{43}\.[a-zA-Z0-9-_=]{43}$/.test(token)) {
            throw new Error(`Invalid --token ('${token}')`);
        }
        yield stat(path_1.dirname(outputPath)).catch(_ => {
            throw new Error(`Invalid --outputPath: file directory doesn't exist ('${outputPath}')`);
        });
        yield stat(outputPath)
            .then(stats => {
            if (stats.isDirectory()) {
                throw new Error(`Invalid --outputPath: outputPath can't be a directory ('${outputPath}')`);
            }
        })
            .catch(_ => null);
        return params;
    });
}
exports.handler = (params) => __awaiter(this, void 0, void 0, function* () {
    const { trackingPlanId, workspaceSlug, token, outputPath } = yield validateParams(params);
    const plan = yield api_1.getTrackingPlanFromNetwork(workspaceSlug, trackingPlanId, token);
    const json = JSON.stringify(rules_1.preprocessRules(plan));
    const output = prettier.format(json, { parser: 'json' });
    yield writeFile(outputPath, output);
    console.log(`\nSynced Tracking Plan (${plan.name}) to: ${outputPath}\n`);
});
//# sourceMappingURL=sync.js.map