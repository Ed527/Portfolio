"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("../../lib/cli");
const typescript_1 = require("typescript");
const cli_2 = require("../../lib/cli");
const util = require("util");
const fs = require("fs");
const writeFile = util.promisify(fs.writeFile);
const library_1 = require("./library");
const typescript_2 = require("./typescript");
exports.command = 'gen-js';
exports.desc = 'Generate a strongly typed JavaScript analytics.js client';
var Client;
(function (Client) {
    Client["js"] = "js";
    Client["node"] = "node";
})(Client = exports.Client || (exports.Client = {}));
var Declarations;
(function (Declarations) {
    Declarations["none"] = "none";
    Declarations["ts"] = "ts";
})(Declarations = exports.Declarations || (exports.Declarations = {}));
exports.builder = Object.assign({}, cli_2.builder, { target: {
        type: 'string',
        required: false,
        default: 'ESNext',
        choices: Object.keys(typescript_1.ScriptTarget).filter(k => typeof typescript_1.ScriptTarget[k] === 'number'),
        description: 'JS Language target'
    }, module: {
        type: 'string',
        required: false,
        default: 'ESNext',
        choices: Object.keys(typescript_1.ModuleKind).filter(k => typeof typescript_1.ModuleKind[k] === 'number'),
        description: 'Module format'
    }, client: {
        type: 'string',
        required: false,
        default: Client.js,
        choices: Object.keys(Client),
        description: 'Segment analytics library to generate for'
    }, declarations: {
        type: 'string',
        required: false,
        default: Declarations.none,
        choices: Object.keys(Declarations),
        description: 'Type declarations to generate alongside the JS library'
    }, runtimeValidation: {
        type: 'boolean',
        default: true,
        required: false,
        description: 'Whether to output runtime validation code'
    } });
exports.handler = cli_1.getTypedTrackHandler((params, { events }) => __awaiter(this, void 0, void 0, function* () {
    const files = [];
    const jsLibrary = yield library_1.genJS(events, params.target, params.module, Client[params.client], params.runtimeValidation);
    files.push(writeFile(`${params.outputPath}/index.js`, jsLibrary));
    if (Declarations[params.declarations] === Declarations.ts) {
        const declarations = yield typescript_2.genTSDeclarations(events, Client[params.client]);
        files.push(writeFile(`${params.outputPath}/index.d.ts`, declarations));
    }
    return Promise.all(files);
}));
//# sourceMappingURL=index.js.map